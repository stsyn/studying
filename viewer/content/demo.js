content['!1 Титульный лист'] = `<p style="text-align:center"><b>ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ БЮДЖЕТНОЕ ОБРАЗОВАТЕЛЬНОЕ УЧРЕЖДЕНИЕ ВЫСШЕГО ОБРАЗОВАНИЯ<br><br>
УФИМСКИЙ ГОСУДАРСТВЕННЫЙ АВИАЦИОННЫЙ ТЕХНИЧЕСКИЙ УНИВЕРСИТЕТ</b><br><br>Кафедра вычислительной техники и защиты информации</p>
<p style="margin-top:8em;text-align:center; line-height:180%">Курсовая работа<br><b>«Обзор технологий сетей P2P»</b><br>по дисциплине<br>«Системы и сети передачи данных»</p>
<p style="margin-top:8em;padding-left:60%; line-height:180%">Выполнил: <em>студент группы БПС-408<br>С. М. Бельский</em><br>Проверил: <em>к.ф-м.н., доцент<br>Р. А. Гараев</em></p>
<p style="margin-top:8em;text-align:center"><b>Уфа-2017</b></p>`;

content['!2 Общие сведения о P2P'] = `# Общие сведения о P2P-сетях
P2P-сеть (также «одноранговая», «децентрализованная») — это компьютерная сеть, основанная на равноправии участников, в которой все узлы сети выполняют одинаковые функции или автоматически могут изменять набор своих функций в зависимости от окружающих условий.

/combineImages /zoomImages /showLabels![P2P-сеть](content/media/p2p-network.png) ![Обычная сеть](content/media/common-network.png)

Сеть состоит из некоторого числа машин, называемых *пирами* (*peer*), при этом каждая может связаться с любой другой. Каждая из этих машин может посылать запросы другим машинам на предоставление каких-либо ресурсов в пределах этой сети и, таким образом, выступать в роли клиента. Будучи сервером, каждая машина должна быть способной обрабатывать запросы от других машин в сети и отсылать то, что было запрошено. Также, каждая машина должна выполнять некоторые вспомогательные и административные функции (например, хранить список других известных машин-«соседей» и поддерживать его актуальность).

Различают несколько видов одноранговых сетей, в зависимости от их структуры:

*	**Централизованные сети с сервером** — подразумевается существование выделенного сервера (чаще — несколько) — *трекера* (*tracker*), который хранит информацию о находящихся в сети пирах и обеспечивает поиск контента. Минусом данного типа сетей является возникающая уязвимость этого узла;
*	**Децентрализованная структура** — выделенного сервера нет, пиры хранят информацию только о «соседях», поиск происходит методом пошагового обхода. Минусом данного типа является большие задержки при выполнении запросов, существует вероятность, что искомый файл не будет найден, даже если он сущестует и доступен в сети, также возможны сложности при подключении; 
*	**Частично централизованные сети** — выделенный сервер может иметься, чтобы ускорять операции поиска и подключения, но количество не определено, и в нем нет обязательной необходимости. 

В сравнении с традиционными сетями, P2P-сети имеют ряд преимуществ:

*	**Надежность** — функционирование сети не страдает, если некоторые узлы сети становятся недоступными;
*	**Большая скорость** — контент может передаваться сразу с нескольких «пиров-серверов»;
*	**Масштабируемость** — увеличение трафика в сети не скажется на ее производительности для отдельного пользователя, в отличие от «клиент-сервер», где общая скорость упирается в суммарный канал всех серверов.

P2P-сети чаще всего используются для организации **распределенных вычислений** и **обмена файлов**. Архитектура P2P  также положена в основу **Bitcoin** и **I2P**.`;

content['!3 Протокол BitTorrent/!1 Общие сведения'] = `#	Протокол BitTorrent

##	Общие сведения

/floatRight ![Лого BitTorrent](content/media/BitTorrent.png)

Протокол BitTorrent предназначен для обмена файлами по сети Интернет и реализован поверх TCP. Torrent-клиенты одновременно скачивают и раздают файлы другим клиентам. Протокол был создан Брэмом Коэном 4 апреля 2001 года. Основной принцип работы примерно совпадает с более старым протоколом eDonkey2000, но работает более эффективно. Тем не менее, сам по себе протокол не обеспечивает никакой поиск файлов, подразумевается, что информация о нем ищется во внешней сети и вносится в программу-клиент.

Основными компонентами протокола являются:

*	[BitTorrent-трекер](?Элементы%20протокола%20BitTorrent/BitTorrent-трекер);
*	[BitTorrent-клиент](?Элементы%20протокола%20BitTorrent/BitTorrent-клиент);
*	[.torrent-файл](?Элементы%20протокола%20BitTorrent/.torrent-файл);
*	[magnet-url](?Элементы%20протокола%20BitTorrent/Magnet%20URI);
*	[DHT](?Элементы%20протокола%20BitTorrent/DHT).

BitTorrent-сеть сама по себе является частично централизованной: трекер обеспечивает быстрый поиск *сидов* (*seed* — пир, у которого искомый файл загружен полностью) и других пиров, и пусть без него сеть и может существовать некоторое время, рано или поздно она «тухнет», так как подключение новых пользователей затруднено. Исправляет данную ситуацию механизм DHT.

Протокол BitTorrent является расширяемым и постоянно развивается.`;

content['!3 Протокол BitTorrent/!2 Принцип работы'] = `##	Принцип работы

### Создание торрента

Если пользователь желает поделиться каким-либо файлом (или файлами), ему необходимо с помощью торрент-клиента создать торрент-файл и выгрузить его на трекер <spoiler>Eсли пользователь преследует цель передать файл конкретному лицу, этот этап можно пропустить, достаточно просто передать файл и сообщать IP-адрес и порт. Также это не является необходимостью при использовании [DHT](?Элементы%20протокола%20BitTorrent/DHT).</spoiler>. Все файлы объединяются в единое целое, а затем дробятся на части размером от 16 до 4096 КБ. Меньшие фрагменты означают, что если в пакете оказалась ошибка, перекачивать повторно придется меньший объем, но при этом возрастает объем торрент-файла.

---

### Объявление (*announce*)

/floatRight /zoomImages /showLabels ![Структура сети](content/media/swarm.png)

Перед началом скачивания клиент подсоединяется к трекеру по адресу, указанному в торрент-файле, сообщает ему свой адрес и хеш-сумму требуемых файлов, на что в ответ клиент получает адреса других пиров в *рое* (*swarm* — совокупность всех пиров в раздаче), скачивающих или раздающих эту же раздачу. Происходит попытка подключения к хотя бы одному из сидов. После начала скачивания, пир становится *личером* (*leecher* — пир, у которого исконная раздача имеется лишь частично).

---

### Скачивание

Как только фрагмент был скачан на компьютер личера, он тут же может быть роздан другим личерам. Специфика самого протокола BitTorrent такова, что сначала скачиваются **самые редкие** фрагменты раздачи, чтобы повысить устойчивости сети <spoiler>Тем не менее, большинство программ-клиентов имеют настраиваемую возможность наплевать на это ограничение и скачивать фрагменты по порядку. При такой загрузке, например, фильма, можно начать его просмотр, когда скачано всего лишь первые несколько мегабайт.</spoiler>. В BitTorrent нет никаких ограничений на количество одновременных подключений, все зависит от пропускной способности сети.

При этом скачивание ведется методом «обмена», то есть симметрично и в примерно равном объеме. Пиры хранят информацию о том, какие сегменты у кого есть, и поэтому может выполняться обмен сегментами, которых нет у напарника. Если пир обнаруживает, что отдал другому клиенту слишком много, передача блокируется на некоторое время.

Следует отметить, что клиент самостоятельно контролирует целостность каждого сегмента. Для этого он использует контрольные суммы (хэш-суммы SHA1). Данная функция препятствует возникновению в сети битых сегментов и, как следствие, поврежденных файлов. В случае обнаружения ошибки, сегмент скачивается заново. Если же клиент целенаправленно засоряет сеть битыми фрагментами, он может быть заблокирован.

---

### End game

Когда скачивание почти завершено, клиент входит в особый режим, называемый *end game*. В этом режиме он запрашивает все оставшиеся сегменты у всех подключенных пиров, что позволяет избежать замедления или полного «зависания» почти завершенной закачки из-за нескольких медленных пиров (для сравнения, в обычном режиме один блок одновременно запрашивается только у одного пира). Когда блок полностью получен, всем пирам отсылается сообщение с отменой передачи данного куска.

---

### Сидирование

Как только закачка завершается, пир становится сидом, и занимается только раздачей. Чтобы стимулировать пиров поддерживать раздачи в «живом» состоянии и не «покидать» их сразу при завершении, на неанонимных трекерах ведется учет скачанного и отданного трафика.

/floatRight /zoomImages /fullGif /showLabels ![Super-seed](content/media/torrenting.png)

Для случаев, когда на раздаче имеется всего один сид с достаточно невысокой исходящей скоростью, существует неофициальный режим *Супер-сидирование* (*Super-seeding*). В этом случае сид максимально минимизирует количество исходящего трафика и передает сегменты лишь тогда, когда убеждается, что остальные пиры тоже получили этот сегмент. Таким образом, сид передает, как правило, не более 105-120% от всего объема файла.`;

content['!4 Элементы протокола BitTorrent/Bencode'] = `# Элементы протокола BitTorrent

## Bencode

Bencode — специальный формат передачи данных со свободной структурой, используемый Bittorent. Поддерживаемые 4 типа данных реализуются следующим образом:

*	**строки** записываются в формате \`\`\`X:string\`\`\`, где *X* — *длина строки*. Например \`\`\`4:work\`\`\`;
*	перед **числами** пишется *i*, после — *e*. Сами числа пишутся в десятичной системе, не могут начинаться с нуля (но запись нулей возможна), перед отрицательными числами ставится минус. Ограничений по размеру числа нет. Например, \`\`\`i-465e\`\`\`;
*	**списки** начинаются с *l*, кончаются на *e*. Элементы списка также bencod'ируются. Например, \`\`\`l4:bps-i408e\`\`\`;
*	**словари** начинаются с *d* и заканчиваются *e*. Представляет собой подряд идущие bencod'ированные пары *ключ-значение*. Например, \`\`\`d3:bps4:good2:ib3:bade\`\`\`. Ключу может соответствовать список, например \`\`\`d3:bpsl4:good8:verygoode2:ib3:bade\`\`\` (оно же в JSON: \`\`\`{bps:['good','verygood'],id:'bad'}\`\`\`). Ключи могут быть только строками и обязаны идти в алфавитном порядке.`;

content['!4 Элементы протокола BitTorrent/BitTorrent-трекер'] = `## BitTorrent-трекер

Первоначально трекеры выполняли лишь координацию процесса передачи файлов между пользователями, но на сегодняшний день трекеры представляют собой полноценные порталы, выполняющие поиск по расшаренным файлам, учитывающие баланс скачано/отдано для каждого пользователя, предоставляют информацию о популярности раздач и так далее. 

Сама технология пусть и подразумевала некоторый принцип честного обмена, на практике нередка ситуация, когда пир либо просто почти сразу удаляет раздачу из клиента, либо обрезать скорость отдачи у себя почти до нуля. Такой пир нисколько не способствуют распространению и поддержанию доступности раздачи и не несет никакой пользы другим участникам сети. Поэтому достаточно быстро появились закрытые (частные) трекеры.

В GET-запросах к трекеру фигурируют следующие поля:

*	\`\`\`info_hash\`\`\` — 20 байтов хэша SHA-1 из поля \`\`\`info\`\`\` .torrent-файла;
*	\`\`\`peer_id\`\`\` — строка 20 байтов, случайный идентификатор пира, созданный им же для данной загрузки;
*	\`\`\`ip\`\`\` — опциональный параметр, используется в тех случаях, когда трекер на той же машине;
*	\`\`\`port\`\`\` — порт, который используется пиром. Как правило, между 6881 и 6889;
*	\`\`\`uploaded\`\`\` — отгруженный трафик;
*	\`\`\`downloaded\`\`\` — скачанный трафик;
*	\`\`\`left\`\`\` — сколько еще этому пиру осталось скачать;
*	\`\`\`event\`\`\` — опциональный, используется в особых случаях: 
	*	\`\`\`started\`\`\` — на стадии анонсирования;
	*	\`\`\`completed\`\`\` — на закачка завершена;
	*	\`\`\`stopped\`\`\` — на закачка прервана пиром.`;
  
content['!4 Элементы протокола BitTorrent/BitTorrent-клиент'] = `## BitTorrent-клиент

Как и трекеры, BitTorrent-клиенты также неплохо обросли дополнительными возможностями. Многие приложения, помимо простого обмена пакетами с трекером и пирами и других принятых в стандарте протокола возможностей, могут:

*	выполнять загрузку раздач с разными приоритетами;
*	иметь возможность настроить пределы скоростей;
*	загружать файлы раздачи также с разными приоритетами (а также можно и вовсе не загружать ненужные файлы);
*	обходить NAT;
*	загружать раздачу последовательно (как правило, сказывается на скорости загрузки).

Наиболее распространенными BitTorrent-клиентами являются:

*	собственно **BitTorrent**;
*	**uTorrent**;
*	**Transmission**;
*	**BitCommet**.

### Обмен данными между клиентами

Все соединения между пирами двусторонние, и одинаковые по структуре пакеты отсылаются в обоих направлениях. Для каждого подключения есть два бита состояния: "*заинтересован*" <spoiler>Клиент желает получить фрагменты файла от другого клиента.</spoiler> или нет, и "*заглохший*" <spoiler>Никакие данные не будут переданы, пока не поступит команда "отглохни".</spoiler> или нет. Обмен данными происходит всегда, когда одна сторона "заинтересована", а другая "не заглохшая".

Все подключения на старте "заглохшие" и "неинтересные". При старте подключения происходит рукопожатие: [13H]BitTorrent protocol (13H — длина строки). После этого заголовка идут 8 зарезервированных байт, на данный момент они равны нулю. Затем идет 20 байт хэша SHA-1 словаря \`\`\`info\`\`\` из файла метаданных. После отсылается 20-байтный идентификатор пира, который был присвоен трекером. Если последние два поля не совпадают с ожидаемыми, соединение разрывается.

После рукопожатия начинается бесконечный поток из сообщений. Сообщения нулевой длины служат для поддержания соединения и, как правило, отсылаются раз в две минуты.

### Сообщения между пирами

Все сообщения, кроме нулевой длины, начинаются с байта, описывающего тип сообщения:

*	\`\`\`0\`\`\` — **choke/заглохни**;
*	\`\`\`1\`\`\` — **unchoke/отглохни**;
*	\`\`\`2\`\`\` — **interested/заинтересован**;
*	\`\`\`3\`\`\` — **not interested/незаинтересован**;
*	\`\`\`4\`\`\` — **have/имеется**;
*	\`\`\`5\`\`\` — **bitfield/поле бит**;
*	\`\`\`6\`\`\` — **request/запрос**;
*	\`\`\`7\`\`\` — **piece/фрагмент**;
*	\`\`\`8\`\`\` — **cancel/отмена**;

Типы до 3 включительно не включают дополнительные данные.

Самым первым отправляется сообщение \`\`\`bitfield\`\`\`. Для каждого фрагмента, который имеется у пира, ставится бит, равный 1, остальные равны 0. Пиры, у которых вообще ничего не загружено, могут пропустить это сообщение.

Сообщение \`\`\`have\`\`\` содержит единственное число, номер фрагмента, который пир загрузил и проверил.

Сообщение \`\`\`request\`\`\` содержит индекс кусочка, начало и длину.

Сообщение \`\`\`cancel\`\`\` имеет такую же структуру и используется в режиме *End game*, чтобы отменить соединения, если фрагмент скачался.

Сообщение \`\`\`piece\`\`\` содержит индекс, начало и собственно кусок.

"Заглушение" внедрено из-за того, что управление перегрузками в TCP ведет себя не самым лучшим образом, когда одновременно происходит множество соединений. Также это позволяет контролировать соотношение между отданным и полученным трафиком и поощрять щедрых пиров.`;
  
content['!4 Элементы протокола BitTorrent/.torrent-файл'] = `## .torrent-файл

Файлы метаданных (*.torrent*) представляет собой словарь в формате bencode, состоящий минимум из следующих пар ключ-значение:

*	\`\`\`announce\`\`\` — URL-адрес трекера (при необходимости использования нескольких трекеров — \`\`\`announce-list\`\`\` и список трекеров)
*	\`\`\`info\`\`\` — словарь, описан ниже.

Некоторые необязательные ключи:

*	\`\`\`comment\`\`\` — поле для описания;
*	\`\`\`created by\`\`\` — название торрент-клиента, который создал файл;
*	\`\`\`creation date\`\`\` — дата создания в формате [Unix epoch](https://www.cy-pr.com/tools/time/);
*	\`\`\`encoding\`\`\` — кодировка, как правило *UTF-8*.

### Словарь info

*	\`\`\`name\`\`\` — предлагаемое по умолчанию имя для сохранения файла или папки;
*	\`\`\`piece length\`\`\` — размер куска в байтах;
*	\`\`\`pieces\`\`\` — контрольные суммы SHA-1 для каждого фрагмента последовательно длинной 20 байт;
*	\`\`\`length\`\`\` — используется, только если в раздаче один файл, содержит размер файла в байтах;
*	\`\`\`files\`\`\` — используется, только если в раздаче несколько файлов, представляет собой список словарей со следующими полями:
	*	\`\`\`length\`\`\` — длина этого файла;
	*	\`\`\`path \`\`\` — список из нескольких строк в UTF-8, каждая означает имя вложенной папки. Последняя строка — собственно имя файла.

Трекеры могут добавлять поле «*private*». В таком случае, торрент-клиент не будет раздавать сегменты пирам, которые стали ему «известны» не через трекер (у них этого поля не будет), а также не будет анонсировать себя **не** приватным трекерам. Если в списке имеется несколько трекеров, используется только один до тех пор, пока он работает. И даже в этом случае при переподключении клиент обязан разорвать соединение со всеми пирами.`;

content['!4 Элементы протокола BitTorrent/Magnet URI'] = `## Magnet URI

Чтобы обходиться без передачи .torrent-файлов, применяются "магнитные ссылки". Ссылка, как правило, содержит лишь самую необходимую информацию для присоединения к рою: хэш-сумму поля \`\`\`info\`\`\` из файла. Все остальные данные скачиваются у пиров, при этом происходит расширение заголовка.

Общий вид для магнитной ссылки следующий: \`\`\`magnet:?xt=urn:btih:[info-hash]&dn=[name]&tr=[tracker-url]&x.pe=[peer-address]\`\`\`. Смысл полей:

*	\`\`\`info-hash\`\`\` — 40 символов, HEX-представление 20 байтов хэш-суммы поля \`\`\`info\`\`\`;
*	\`\`\`name\`\`\` — имя, которое будет отображаться в списке раздач у клиента до тех пор, пока не будут загружены метаданные. Опционален;
*	\`\`\`tracker-url\`\`\` — адрес трекера. Если трекеров несколько, параметр может повторяться. Может и вовсе отсутствовать;
*	\`\`\`peer-address\`\`\` — аналогичен предыдущему, но содержит ip-адрес/порт пира. Имеет смысл, только если IP "белый". Если параметр имеется, загрузка метаданных будет начата сразу же с этого адреса.`;

content['!4 Элементы протокола BitTorrent/DHT'] = `## DHT

DHT (Distributed hash table, *распределенная хэш-таблица*) — это протокол, позволяющий BitTorrent-клиентам находить друг друга без использования трекера. Похожую задачу выполняет протокол PEX (Peer exchange, *обмен пиров*), который позволяет участникам роя обмениваться списками пиров друг друга для этой раздачи.

Оба этх протокола преследуют следующие задачи:

*	Помогают пирам быстрее находить друг друга;
*	Снижают нагрузку на трекер;
*	Позволяют поддерживать раздачи при временной неработоспособности трекера или вообще его отсутствии.

DHT в рамках BitTorrent'а построен на основе Kademlia. Узлы этой сети общаются между собой с использованием протокола UDP. У каждого узла есть свой уникальный идентификатор, который генерируется случайно при подключении и имеет длину 160 бит (хэши раздач в BitTorrent имеют такую же длину, это важно). XOR от двух идентификаторов узлов является расстоянием между этими двумя узлами (при этом географическое расположение не имеет значения). Каждый узел имеет свою таблицу маршрутизации, при этом записей для "близких" узлов записей гораздо больше, чем для "дальних".

При поиске пиров раздачи узел опрашивает наиболее ближайшие к этому хэшу-запросу узел из своей таблицы маршрутизации. Если ответивший узел не имеет информации об этой раздаче, он возвращает контактные данные других более близких узлов. Иначе в ответ высылается информация о подключенных к раздаче пирах.

Все узлы делятся на "*хорошие*", "*плохие*" и "*под вопросом*". К "**хорошим**" узлам относятся те, которые ответили на запрос в последние 15 минут, а также те, которые в эти 15 минут сами отправили запрос. Если узел в эти 15 минут молчит, значит он становится "**под вопросом**". "**Плохие**" узлы не смогли ответить на несколько запросов подряд. Хорошие узлы имеют больший приоритет при отправке запросов.

Ближайшие узлы объединяются в "*ведра*", которые охватывают непрерывный диапазон. Вместимость ведра составляет 8 узлов. Когда ведро переполняется *хорошими* узлами, оно делится пополам на два новых ведра. Ведущие себя *плохо* узлы отбрасываются, узлы "*под вопросом*" сначала пингуются, и отбрасываются только в случае, если они отвечают на запрос.

Каждое ведро имеет значение "*последнее изменение*", которое отражает свежесть содержимого ведра, причем это значение обновляется при любом изменении структуры ведра. Если значение превышает 15 минут, выполняется запрос **find_nodes** с любым ID, попадающим в диапазон ведра.`;

content['!5 Список литературы'] = `# Список литературы

1. [The BitTorrent Protocol Specification](http://www.bittorrent.org/beps/bep_0003.html) [Электронный ресурс]. Дата обращения: [19.11.2017](http://web.archive.org/web/20171119111803/http://www.bittorrent.org/beps/bep_0003.html);
1. [DHT Protocol](http://www.bittorrent.org/beps/bep_0005.html) [Электронный ресурс]. Дата обращения: [03.12.2017](http://web.archive.org/web/20171203174314/http://www.bittorrent.org/beps/bep_0005.html);
1. [Extension for Peers to Send Metadata Files](http://www.bittorrent.org/beps/bep_0009.html) [Электронный ресурс]. Дата обращения: [03.12.2017](http://web.archive.org/web/20171203174433/http://www.bittorrent.org/beps/bep_0009.html);
7. [BitTorrent (протокол) — Википедия](https://ru.wikipedia.org/wiki/BitTorrent_(%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB)) (в т.ч. [английская версия](https://en.wikipedia.org/wiki/BitTorrent)) [Электронный ресурс]. Дата обращения: [19.11.2017](https://web.archive.org/web/20171119103934/https://ru.wikipedia.org/wiki/BitTorrent_(%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB));
2. [BitTorrent-трекер — Википедия](https://ru.wikipedia.org/wiki/BitTorrent-%D1%82%D1%80%D0%B5%D0%BA%D0%B5%D1%80) [Электронный ресурс]. Дата обращения: [19.11.2017](https://web.archive.org/web/20171119104201/https://ru.wikipedia.org/wiki/BitTorrent-%D1%82%D1%80%D0%B5%D0%BA%D0%B5%D1%80));
3. [BitTorrent. Как это работает и как с этим работать](https://xdrv.ru/articles/software/30/full) [Электронный ресурс]. Дата обращения: [19.11.2017](http://web.archive.org/web/20171119104429/https://xdrv.ru/articles/software/30/full);
4. [Glossary of BitTorrent terms — Wikipedia](https://en.wikipedia.org/wiki/Glossary_of_BitTorrent_terms) [Электронный ресурс]. Дата обращения: [19.11.2017](http://web.archive.org/web/20171119104616/https://en.wikipedia.org/wiki/Glossary_of_BitTorrent_terms);
5. [Как работает протокол BitTorrent](https://www.iguides.ru/main/other/kak_rabotaet_protokol_bittorrent/) [Электронный ресурс]. Дата обращения: [19.11.2017](http://web.archive.org/web/20171119104920/https://www.iguides.ru/main/other/kak_rabotaet_protokol_bittorrent/);
6. [Поднимаем BitTorrent трекер — Журнал «Хакер» 04.09.2008](https://xakep.ru/2008/09/04/45007/) [Электронный ресурс]. Дата обращения: [19.11.2017](http://web.archive.org/web/20171119110759/https://xakep.ru/2008/09/04/45007/);
7. [Torrent-файл. Что же у него внутри? / Хабрахабр](https://habrahabr.ru/post/119753/) [Электронный ресурс]. Дата обращения: [19.11.2017](http://web.archive.org/web/20171119115517/https://habrahabr.ru/post/119753/);`;