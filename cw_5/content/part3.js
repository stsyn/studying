content.components = {
multilevel:true,
next:'list',
first:'bencode',
name:'Элементы протокола BitTorrent',
id:'components',
l2:{
	bencode:{
		c:
`# Элементы протокола BitTorrent

## Bencode

/nativeHTML /applyToNext /skipCurrent Bencode — специальный формат передачи данных со свободной структурой, используемый Bittorent. Поддерживаемые 4 типа данных реализуются следующим образом:

*	**строки** записываются в формате <pre>X:string</pre>, где *X* — *длина строки*. Например <pre>4:work</pre>;
*	перед **числами** пишется *i*, после — *e*. Сами числа пишутся в десятичной системе, не могут начинаться с нуля (но запись нулей возможна), перед отрицательными числами ставится минус. Ограничений по размеру числа нет. Например, <pre>i-465e</pre>;
*	**списки** начинаются с *l*, кончаются на *e*. Элементы списка также bencod'ируются. Например, <pre>l4:bps-i408e</pre>;
*	**словари** начинаются с *d* и заканчиваются *e*. Представляет собой подряд идущие bencod'ированные пары *ключ-значение*. Например, <pre>d3:bps4:good2:ib3:bade</pre>. Ключу может соответствовать список, например <pre>d3:bpsl4:good8:verygoode2:ib3:bade</pre> (оно же в JSON: <pre>{bps:['good','verygood'],id:'bad'}</pre>). Ключи могут быть только строками и обязаны идти в алфавитном порядке.
`,
		markdown:true,
		name:'Bencode',
		next:'tracker',
		id:'bencode'
	},
	
	tracker:{
		c:
`## BitTorrent-трекер

Первоначально трекеры выполняли лишь координацию процесса передачи файлов между пользователями, но на сегодняшний день трекеры представляют собой полноценные порталы, выполняющие поиск по расшаренным файлам, учитывающие баланс скачано/отдано для каждого пользователя, предоставляют информацию о популярности раздач и так далее. 

Сама технология пусть и подразумевала некоторый принцип честного обмена, на практике нередка ситуация, когда пир либо просто почти сразу удаляет раздачу из клиента, либо обрезать скорость отдачи у себя почти до нуля. Такой пир нисколько не способствуют распространению и поддержанию доступности раздачи и не несет никакой пользы другим участникам сети. Поэтому достаточно быстро появились закрытые (частные) трекеры.

/nativeHTML /applyToNext /skipCurrent В GET-запросах к трекеру фигурируют следующие поля:

*	<pre>info_hash</pre> — 20 байтов хэша SHA-1 из поля <pre>info</pre> .torrent-файла;
*	<pre>peer_id</pre> — строка 20 байтов, случайный идентификатор пира, созданный им же для данной загрузки;
*	<pre>ip</pre> — опциональный параметр, используется в тех случаях, когда трекер на той же машине;
*	<pre>port</pre> — порт, который используется пиром. Как правило, между 6881 и 6889;
*	<pre>uploaded</pre> — отгруженный трафик;
*	<pre>downloaded</pre> — скачанный трафик;
*	<pre>left</pre> — сколько еще этому пиру осталось скачать;
*	<pre>event</pre> — опциональный, используется в особых случаях: 
	*	<pre>started</pre> — на стадии анонсирования;
	*	<pre>completed</pre> — на закачка завершена;
	*	<pre>stopped</pre> — на закачка прервана пиром.
`,
		markdown:true,
		name:'BitTorrent-трекер',
		next:'client',
		id:'tracker'
	},
	
	client:{
		c:
`## BitTorrent-клиент

Как и трекеры, BitTorrent-клиенты также неплохо обросли дополнительными возможностями. Многие приложения, помимо простого обмена пакетами с трекером и пирами и других принятых в стандарте протокола возможностей, могут:

*	выполнять загрузку раздач с разными приоритетами;
*	иметь возможность настроить пределы скоростей;
*	загружать файлы раздачи также с разными приоритетами (а также можно и вовсе не загружать ненужные файлы);
*	обходить NAT;
*	загружать раздачу последовательно (как правило, сказывается на скорости загрузки).

Наиболее распространенными BitTorrent-клиентами являются:

*	собственно **BitTorrent**;
*	**uTorrent**;
*	**Transmission**;
*	**BitCommet**.

### Обмен данными между клиентами

Все соединения между пирами двусторонние, и одинаковые по структуре пакеты отсылаются в обоих направлениях. Для каждого подключения есть два бита состояния: "*заинтересован*"[spoiler]Клиент желает получить фрагменты файла от другого клиента.[/spoiler] или нет, и "*заглохший*"[spoiler]Если клиент не может ничего отправить в ответ (канал на выходе забит полностью), или он является сидом, которому не нужно ничего получать, то клиент считается "*заглохшим*".[/spoiler] или нет. Обмен данными происходит, когда одна сторона "заинтересована", а другая "не заглохшая".

/nativeHTML Все подключения на старте "заглохшие" и "неинтересные". При старте подключения происходит рукопожатие: [13H]BitTorrent protocol (13H — длина строки). После этого заголовка идут 8 зарезервированных байт, на данный момент они равны нулю. Затем идет 20 байт хэша SHA-1 словаря <pre>info</pre> из файла метаданных. После отсылается 20-байтный идентификатор пира, который был присвоен трекером. Если последние два поля не совпадают с ожидаемыми, соединение разрывается.

После рукопожатия начинается бесконечный поток из сообщений. Сообщения нулевой длины служат для поддержания соединения и, как правило, отсылаются раз в две минуты.

### Сообщения между пирами

/nativeHTML /applyToNext /skipCurrent Все сообщения, кроме нулевой длины, начинаются с байта, описывающего тип сообщения:

*	<pre>0</pre> — **choke/заглохни**;
*	<pre>1</pre> — **unchoke/отглохни**;
*	<pre>2</pre> — **interested/заинтересован**;
*	<pre>3</pre> — **not interested/незаинтересован**;
*	<pre>4</pre> — **have/имеется**;
*	<pre>5</pre> — **bitfield/поле бит**;
*	<pre>6</pre> — **request/запрос**;
*	<pre>7</pre> — **piece/фрагмент**;
*	<pre>8</pre> — **cancel/отмена**;

Типы до 3 включительно не включают дополнительные данные.

/nativeHTML Самым первым отправляется сообщение <pre>bitfield</pre>. Для каждого фрагмента, который имеется у пира, ставится бит, равный 1, остальные равны 0. Пиры, у которых вообще ничего не загружено, могут пропустить это сообщение.

/nativeHTML Сообщение <pre>have</pre> содержит единственное число, номер фрагмента, который пир загрузил и проверил.

/nativeHTML Сообщение <pre>request</pre> содержит индекс кусочка, начало и длину.

/nativeHTML Сообщение <pre>cancel</pre> имеет такую же структуру и используется в режиме *End game*, чтобы отменить соединения, если фрагмент скачался.
`,
		markdown:true,
		name:'BitTorrent-клиент',
		next:'file',
		id:'client'
	},
	
	file:{
		c:
`## .torrent-файл

/nativeHTML /applyToNext /skipCurrent Файлы метаданных (*.torrent*) представляет собой словарь в формате bencode, состоящий минимум из следующих пар ключ-значение:

*	<pre>announce</pre> — URL-адрес трекера (при необходимости использования нескольких трекеров — <pre>announce-list</pre> и список трекеров)
*	<pre>info</pre> — словарь, описан ниже.

/nativeHTML /applyToNext /skipCurrent Некоторые необязательные ключи:

*	<pre>comment</pre> — поле для описания;
*	<pre>created by</pre> — название торрент-клиента, который создал файл;
*	<pre>creation date</pre> — дата создания в формате [Unix epoch](https://www.cy-pr.com/tools/time/);
*	<pre>encoding</pre> — кодировка, как правило *UTF-8*.

### Словарь info /nativeHTML /applyToNext /skipCurrent 

*	<pre>name</pre> — предлагаемое по умолчанию имя для сохранения файла или папки;
*	<pre>piece length</pre> — размер куска в байтах;
*	<pre>pieces</pre> — контрольные суммы SHA-1 для каждого фрагмента последовательно длинной 20 байт;
*	<pre>length</pre> — используется, только если в раздаче один файл, содержит размер файла в байтах;
*	<pre>files</pre> — используется, только если в раздаче несколько файлов, представляет собой список словарей со следующими полями:
	*	<pre>length</pre> — длина этого файла;
	*	<pre>path </pre> — список из нескольких строк в UTF-8, каждая означает имя вложенной папки. Последняя строка — собственно имя файла.

Трекеры могут добавлять поле «*private*». В таком случае, торрент-клиент не будет раздавать сегменты пирам, которые стали ему «известны» не через трекер (у них этого поля не будет). Также может вшиваться так называемый *pass-key*, чтобы реализовывать «узнавание» пользователя и учет трафика.`,
		markdown:true,
		name:'.torrent-файл',
		next:'magnet',
		id:'file'
	},
	
	magnet:{
		c:
``,
		markdown:true,
		name:'magnet-url',
		next:'DHT',
		id:'magnet'
	},
	
	DHT:{
		c:
``,
		markdown:true,
		name:'DHT',
		id:'DHT'
	}
}
}